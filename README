This project is an Independent Study to develop a compiler/interpreter/etc.


The language followed by the current master is described by:

<stmts>     ::= <stmt> <stmts> | empty
<stmt>      ::= <output> | <vardec> | <assign> | <cond> | <loop>
<output>    ::= PRINT LPAREN <expr> RPAREN SEMICOLON | PRINTLN LPAREN <expr> RPAREN SEMICOLON
<input>     ::= READINT LPAREN STRING RPAREN | READSTR LPAREN STRING RPAREN
<vardec>    ::= <type> <subtype> ID <vardect>
<vardect>   ::= ASSIGN <expr> SEMICOLON | SEMICOLON
<assign>    ::= ID <listindex> ASSIGN <expr> SEMICOLON
<listindex> ::= LBRACKET <expr> RBRACKET | empty
<type>     ::= STRINGT | INTEGER | FLOAT | CHAR | BOOLEAN
<subtype>   ::= LBRACKET RBRACKET | empty
<expr>      ::= <value> <exprt>
<exprt>     ::= <math_rel> <expr> | empty
<value>     ::= ID <listindex> | STRING | INT | BOOL | <input> | LBRACKET <exprlist> RBRACKET
<exprlist>  ::= <expr> <exprtail> | empty
<exprtail>  ::= COMMA <expr> <exprtail> | empty
<math_rel>  ::= PLUS | MINUS | DIVIDE | MULTIPLY
<cond>      ::= IF <ifstmt> <condt> END
<condt>     ::= ELIF <ifstmt> <condt> | ELSE <stmts> | empty
<ifstmt>    ::= <bexpr> THEN <stmts>
<bexpr>     ::= <expr> <bexprt> | NOT <expr> <bexprt>
<bexprt>    ::= <bool_rel> <expr> <bconnct> | empty
<bconnct>   ::= AND <bexpr> | OR <bexpr> | empty
<bool_rel>  ::= EQUAL | LESS_THAN | GREATER_THAN | LESS_THAN_EQUAL | GREATER_THAN_EQUAL | NOT_EQUAL
<loop>      ::= WHILE <bexpr> DO <stmts> END

To build:
1. Open the accompanying Code::Blocks project and build it there. (Recommended for Windows users)
2. Utilize the accompanying makefile. (Recommended for Unix users, but using Code::Blocks is cool, too)

How to use:
  LexicalAnalyzer [options] file [file file ...]
  Options:
    -o <filename> : All output is piped to the specified filename.
    -p            : Parse-only. Just checks syntax.
    -no-print     : Does not print out the AST after it is created.

Runtime errors:
1. If the syntax of the input file is definitely correct, but there is still a syntax error being thrown, then it is likely to do with the line endings. The program expects Unix style-endings, but Windows-style may be present. Use d2u, dos2unix, or sed to modify the input file to Unix-style line endings.
